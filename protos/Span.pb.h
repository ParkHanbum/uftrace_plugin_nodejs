// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Span.proto

#ifndef PROTOBUF_INCLUDED_Span_2eproto
#define PROTOBUF_INCLUDED_Span_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "Annotation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Span_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Span_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Span_2eproto();
namespace v1 {
class PAcceptEvent;
class PAcceptEventDefaultTypeInternal;
extern PAcceptEventDefaultTypeInternal _PAcceptEvent_default_instance_;
class PApiMetaData;
class PApiMetaDataDefaultTypeInternal;
extern PApiMetaDataDefaultTypeInternal _PApiMetaData_default_instance_;
class PLocalAsyncId;
class PLocalAsyncIdDefaultTypeInternal;
extern PLocalAsyncIdDefaultTypeInternal _PLocalAsyncId_default_instance_;
class PMessageEvent;
class PMessageEventDefaultTypeInternal;
extern PMessageEventDefaultTypeInternal _PMessageEvent_default_instance_;
class PNextEvent;
class PNextEventDefaultTypeInternal;
extern PNextEventDefaultTypeInternal _PNextEvent_default_instance_;
class PParentInfo;
class PParentInfoDefaultTypeInternal;
extern PParentInfoDefaultTypeInternal _PParentInfo_default_instance_;
class PResult;
class PResultDefaultTypeInternal;
extern PResultDefaultTypeInternal _PResult_default_instance_;
class PSpan;
class PSpanDefaultTypeInternal;
extern PSpanDefaultTypeInternal _PSpan_default_instance_;
class PSpanChunk;
class PSpanChunkDefaultTypeInternal;
extern PSpanChunkDefaultTypeInternal _PSpanChunk_default_instance_;
class PSpanEvent;
class PSpanEventDefaultTypeInternal;
extern PSpanEventDefaultTypeInternal _PSpanEvent_default_instance_;
class PSpanMessage;
class PSpanMessageDefaultTypeInternal;
extern PSpanMessageDefaultTypeInternal _PSpanMessage_default_instance_;
class PSqlMetaData;
class PSqlMetaDataDefaultTypeInternal;
extern PSqlMetaDataDefaultTypeInternal _PSqlMetaData_default_instance_;
class PStringMetaData;
class PStringMetaDataDefaultTypeInternal;
extern PStringMetaDataDefaultTypeInternal _PStringMetaData_default_instance_;
class PTransactionId;
class PTransactionIdDefaultTypeInternal;
extern PTransactionIdDefaultTypeInternal _PTransactionId_default_instance_;
}  // namespace v1
namespace google {
namespace protobuf {
template<> ::v1::PAcceptEvent* Arena::CreateMaybeMessage<::v1::PAcceptEvent>(Arena*);
template<> ::v1::PApiMetaData* Arena::CreateMaybeMessage<::v1::PApiMetaData>(Arena*);
template<> ::v1::PLocalAsyncId* Arena::CreateMaybeMessage<::v1::PLocalAsyncId>(Arena*);
template<> ::v1::PMessageEvent* Arena::CreateMaybeMessage<::v1::PMessageEvent>(Arena*);
template<> ::v1::PNextEvent* Arena::CreateMaybeMessage<::v1::PNextEvent>(Arena*);
template<> ::v1::PParentInfo* Arena::CreateMaybeMessage<::v1::PParentInfo>(Arena*);
template<> ::v1::PResult* Arena::CreateMaybeMessage<::v1::PResult>(Arena*);
template<> ::v1::PSpan* Arena::CreateMaybeMessage<::v1::PSpan>(Arena*);
template<> ::v1::PSpanChunk* Arena::CreateMaybeMessage<::v1::PSpanChunk>(Arena*);
template<> ::v1::PSpanEvent* Arena::CreateMaybeMessage<::v1::PSpanEvent>(Arena*);
template<> ::v1::PSpanMessage* Arena::CreateMaybeMessage<::v1::PSpanMessage>(Arena*);
template<> ::v1::PSqlMetaData* Arena::CreateMaybeMessage<::v1::PSqlMetaData>(Arena*);
template<> ::v1::PStringMetaData* Arena::CreateMaybeMessage<::v1::PStringMetaData>(Arena*);
template<> ::v1::PTransactionId* Arena::CreateMaybeMessage<::v1::PTransactionId>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace v1 {

// ===================================================================

class PSpanMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PSpanMessage) */ {
 public:
  PSpanMessage();
  virtual ~PSpanMessage();

  PSpanMessage(const PSpanMessage& from);

  inline PSpanMessage& operator=(const PSpanMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSpanMessage(PSpanMessage&& from) noexcept
    : PSpanMessage() {
    *this = ::std::move(from);
  }

  inline PSpanMessage& operator=(PSpanMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PSpanMessage& default_instance();

  enum FieldCase {
    kSpan = 1,
    kSpanChunk = 2,
    FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSpanMessage* internal_default_instance() {
    return reinterpret_cast<const PSpanMessage*>(
               &_PSpanMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PSpanMessage* other);
  friend void swap(PSpanMessage& a, PSpanMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSpanMessage* New() const final {
    return CreateMaybeMessage<PSpanMessage>(nullptr);
  }

  PSpanMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSpanMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PSpanMessage& from);
  void MergeFrom(const PSpanMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSpanMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .v1.PSpan span = 1;
  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  const ::v1::PSpan& span() const;
  ::v1::PSpan* release_span();
  ::v1::PSpan* mutable_span();
  void set_allocated_span(::v1::PSpan* span);

  // .v1.PSpanChunk spanChunk = 2;
  bool has_spanchunk() const;
  void clear_spanchunk();
  static const int kSpanChunkFieldNumber = 2;
  const ::v1::PSpanChunk& spanchunk() const;
  ::v1::PSpanChunk* release_spanchunk();
  ::v1::PSpanChunk* mutable_spanchunk();
  void set_allocated_spanchunk(::v1::PSpanChunk* spanchunk);

  void clear_field();
  FieldCase field_case() const;
  // @@protoc_insertion_point(class_scope:v1.PSpanMessage)
 private:
  class HasBitSetters;
  void set_has_span();
  void set_has_spanchunk();

  inline bool has_field() const;
  inline void clear_has_field();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FieldUnion {
    FieldUnion() {}
    ::v1::PSpan* span_;
    ::v1::PSpanChunk* spanchunk_;
  } field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PSpan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PSpan) */ {
 public:
  PSpan();
  virtual ~PSpan();

  PSpan(const PSpan& from);

  inline PSpan& operator=(const PSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSpan(PSpan&& from) noexcept
    : PSpan() {
    *this = ::std::move(from);
  }

  inline PSpan& operator=(PSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSpan* internal_default_instance() {
    return reinterpret_cast<const PSpan*>(
               &_PSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PSpan* other);
  friend void swap(PSpan& a, PSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSpan* New() const final {
    return CreateMaybeMessage<PSpan>(nullptr);
  }

  PSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PSpan& from);
  void MergeFrom(const PSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PAnnotation annotation = 10;
  int annotation_size() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 10;
  ::PAnnotation* mutable_annotation(int index);
  ::google::protobuf::RepeatedPtrField< ::PAnnotation >*
      mutable_annotation();
  const ::PAnnotation& annotation(int index) const;
  ::PAnnotation* add_annotation();
  const ::google::protobuf::RepeatedPtrField< ::PAnnotation >&
      annotation() const;

  // repeated .v1.PSpanEvent spanEvent = 13;
  int spanevent_size() const;
  void clear_spanevent();
  static const int kSpanEventFieldNumber = 13;
  ::v1::PSpanEvent* mutable_spanevent(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >*
      mutable_spanevent();
  const ::v1::PSpanEvent& spanevent(int index) const;
  ::v1::PSpanEvent* add_spanevent();
  const ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >&
      spanevent() const;

  // .v1.PTransactionId transactionId = 2;
  bool has_transactionid() const;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  const ::v1::PTransactionId& transactionid() const;
  ::v1::PTransactionId* release_transactionid();
  ::v1::PTransactionId* mutable_transactionid();
  void set_allocated_transactionid(::v1::PTransactionId* transactionid);

  // .v1.PAcceptEvent acceptEvent = 9;
  bool has_acceptevent() const;
  void clear_acceptevent();
  static const int kAcceptEventFieldNumber = 9;
  const ::v1::PAcceptEvent& acceptevent() const;
  ::v1::PAcceptEvent* release_acceptevent();
  ::v1::PAcceptEvent* mutable_acceptevent();
  void set_allocated_acceptevent(::v1::PAcceptEvent* acceptevent);

  // .PIntStringValue exceptionInfo = 14;
  bool has_exceptioninfo() const;
  void clear_exceptioninfo();
  static const int kExceptionInfoFieldNumber = 14;
  const ::PIntStringValue& exceptioninfo() const;
  ::PIntStringValue* release_exceptioninfo();
  ::PIntStringValue* mutable_exceptioninfo();
  void set_allocated_exceptioninfo(::PIntStringValue* exceptioninfo);

  // sfixed64 spanId = 3;
  void clear_spanid();
  static const int kSpanIdFieldNumber = 3;
  ::google::protobuf::int64 spanid() const;
  void set_spanid(::google::protobuf::int64 value);

  // int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int32 elapsed = 6;
  void clear_elapsed();
  static const int kElapsedFieldNumber = 6;
  ::google::protobuf::int32 elapsed() const;
  void set_elapsed(::google::protobuf::int32 value);

  // sfixed64 parentSpanId = 4;
  void clear_parentspanid();
  static const int kParentSpanIdFieldNumber = 4;
  ::google::protobuf::int64 parentspanid() const;
  void set_parentspanid(::google::protobuf::int64 value);

  // int64 startTime = 5;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // int32 apiId = 7;
  void clear_apiid();
  static const int kApiIdFieldNumber = 7;
  ::google::protobuf::int32 apiid() const;
  void set_apiid(::google::protobuf::int32 value);

  // int32 serviceType = 8;
  void clear_servicetype();
  static const int kServiceTypeFieldNumber = 8;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // int32 flag = 11;
  void clear_flag();
  static const int kFlagFieldNumber = 11;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // sint32 err = 12;
  void clear_err();
  static const int kErrFieldNumber = 12;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // int32 applicationServiceType = 15;
  void clear_applicationservicetype();
  static const int kApplicationServiceTypeFieldNumber = 15;
  ::google::protobuf::int32 applicationservicetype() const;
  void set_applicationservicetype(::google::protobuf::int32 value);

  // int32 loggingTransactionInfo = 16;
  void clear_loggingtransactioninfo();
  static const int kLoggingTransactionInfoFieldNumber = 16;
  ::google::protobuf::int32 loggingtransactioninfo() const;
  void set_loggingtransactioninfo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PSpan)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PAnnotation > annotation_;
  ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent > spanevent_;
  ::v1::PTransactionId* transactionid_;
  ::v1::PAcceptEvent* acceptevent_;
  ::PIntStringValue* exceptioninfo_;
  ::google::protobuf::int64 spanid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 elapsed_;
  ::google::protobuf::int64 parentspanid_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 apiid_;
  ::google::protobuf::int32 servicetype_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 applicationservicetype_;
  ::google::protobuf::int32 loggingtransactioninfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PTransactionId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PTransactionId) */ {
 public:
  PTransactionId();
  virtual ~PTransactionId();

  PTransactionId(const PTransactionId& from);

  inline PTransactionId& operator=(const PTransactionId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PTransactionId(PTransactionId&& from) noexcept
    : PTransactionId() {
    *this = ::std::move(from);
  }

  inline PTransactionId& operator=(PTransactionId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PTransactionId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PTransactionId* internal_default_instance() {
    return reinterpret_cast<const PTransactionId*>(
               &_PTransactionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PTransactionId* other);
  friend void swap(PTransactionId& a, PTransactionId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PTransactionId* New() const final {
    return CreateMaybeMessage<PTransactionId>(nullptr);
  }

  PTransactionId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PTransactionId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PTransactionId& from);
  void MergeFrom(const PTransactionId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTransactionId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string agentId = 1;
  void clear_agentid();
  static const int kAgentIdFieldNumber = 1;
  const ::std::string& agentid() const;
  void set_agentid(const ::std::string& value);
  #if LANG_CXX11
  void set_agentid(::std::string&& value);
  #endif
  void set_agentid(const char* value);
  void set_agentid(const char* value, size_t size);
  ::std::string* mutable_agentid();
  ::std::string* release_agentid();
  void set_allocated_agentid(::std::string* agentid);

  // int64 agentStartTime = 2;
  void clear_agentstarttime();
  static const int kAgentStartTimeFieldNumber = 2;
  ::google::protobuf::int64 agentstarttime() const;
  void set_agentstarttime(::google::protobuf::int64 value);

  // int64 sequence = 3;
  void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:v1.PTransactionId)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr agentid_;
  ::google::protobuf::int64 agentstarttime_;
  ::google::protobuf::int64 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PAcceptEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PAcceptEvent) */ {
 public:
  PAcceptEvent();
  virtual ~PAcceptEvent();

  PAcceptEvent(const PAcceptEvent& from);

  inline PAcceptEvent& operator=(const PAcceptEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PAcceptEvent(PAcceptEvent&& from) noexcept
    : PAcceptEvent() {
    *this = ::std::move(from);
  }

  inline PAcceptEvent& operator=(PAcceptEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PAcceptEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PAcceptEvent* internal_default_instance() {
    return reinterpret_cast<const PAcceptEvent*>(
               &_PAcceptEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PAcceptEvent* other);
  friend void swap(PAcceptEvent& a, PAcceptEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PAcceptEvent* New() const final {
    return CreateMaybeMessage<PAcceptEvent>(nullptr);
  }

  PAcceptEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PAcceptEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PAcceptEvent& from);
  void MergeFrom(const PAcceptEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PAcceptEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rpc = 1;
  void clear_rpc();
  static const int kRpcFieldNumber = 1;
  const ::std::string& rpc() const;
  void set_rpc(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc(::std::string&& value);
  #endif
  void set_rpc(const char* value);
  void set_rpc(const char* value, size_t size);
  ::std::string* mutable_rpc();
  ::std::string* release_rpc();
  void set_allocated_rpc(::std::string* rpc);

  // string endPoint = 2;
  void clear_endpoint();
  static const int kEndPointFieldNumber = 2;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string remoteAddr = 3;
  void clear_remoteaddr();
  static const int kRemoteAddrFieldNumber = 3;
  const ::std::string& remoteaddr() const;
  void set_remoteaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_remoteaddr(::std::string&& value);
  #endif
  void set_remoteaddr(const char* value);
  void set_remoteaddr(const char* value, size_t size);
  ::std::string* mutable_remoteaddr();
  ::std::string* release_remoteaddr();
  void set_allocated_remoteaddr(::std::string* remoteaddr);

  // .v1.PParentInfo parentInfo = 4;
  bool has_parentinfo() const;
  void clear_parentinfo();
  static const int kParentInfoFieldNumber = 4;
  const ::v1::PParentInfo& parentinfo() const;
  ::v1::PParentInfo* release_parentinfo();
  ::v1::PParentInfo* mutable_parentinfo();
  void set_allocated_parentinfo(::v1::PParentInfo* parentinfo);

  // @@protoc_insertion_point(class_scope:v1.PAcceptEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rpc_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr remoteaddr_;
  ::v1::PParentInfo* parentinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PParentInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PParentInfo) */ {
 public:
  PParentInfo();
  virtual ~PParentInfo();

  PParentInfo(const PParentInfo& from);

  inline PParentInfo& operator=(const PParentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PParentInfo(PParentInfo&& from) noexcept
    : PParentInfo() {
    *this = ::std::move(from);
  }

  inline PParentInfo& operator=(PParentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PParentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PParentInfo* internal_default_instance() {
    return reinterpret_cast<const PParentInfo*>(
               &_PParentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PParentInfo* other);
  friend void swap(PParentInfo& a, PParentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PParentInfo* New() const final {
    return CreateMaybeMessage<PParentInfo>(nullptr);
  }

  PParentInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PParentInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PParentInfo& from);
  void MergeFrom(const PParentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PParentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parentApplicationName = 1;
  void clear_parentapplicationname();
  static const int kParentApplicationNameFieldNumber = 1;
  const ::std::string& parentapplicationname() const;
  void set_parentapplicationname(const ::std::string& value);
  #if LANG_CXX11
  void set_parentapplicationname(::std::string&& value);
  #endif
  void set_parentapplicationname(const char* value);
  void set_parentapplicationname(const char* value, size_t size);
  ::std::string* mutable_parentapplicationname();
  ::std::string* release_parentapplicationname();
  void set_allocated_parentapplicationname(::std::string* parentapplicationname);

  // string acceptorHost = 3;
  void clear_acceptorhost();
  static const int kAcceptorHostFieldNumber = 3;
  const ::std::string& acceptorhost() const;
  void set_acceptorhost(const ::std::string& value);
  #if LANG_CXX11
  void set_acceptorhost(::std::string&& value);
  #endif
  void set_acceptorhost(const char* value);
  void set_acceptorhost(const char* value, size_t size);
  ::std::string* mutable_acceptorhost();
  ::std::string* release_acceptorhost();
  void set_allocated_acceptorhost(::std::string* acceptorhost);

  // int32 parentApplicationType = 2;
  void clear_parentapplicationtype();
  static const int kParentApplicationTypeFieldNumber = 2;
  ::google::protobuf::int32 parentapplicationtype() const;
  void set_parentapplicationtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PParentInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parentapplicationname_;
  ::google::protobuf::internal::ArenaStringPtr acceptorhost_;
  ::google::protobuf::int32 parentapplicationtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PLocalAsyncId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PLocalAsyncId) */ {
 public:
  PLocalAsyncId();
  virtual ~PLocalAsyncId();

  PLocalAsyncId(const PLocalAsyncId& from);

  inline PLocalAsyncId& operator=(const PLocalAsyncId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PLocalAsyncId(PLocalAsyncId&& from) noexcept
    : PLocalAsyncId() {
    *this = ::std::move(from);
  }

  inline PLocalAsyncId& operator=(PLocalAsyncId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PLocalAsyncId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PLocalAsyncId* internal_default_instance() {
    return reinterpret_cast<const PLocalAsyncId*>(
               &_PLocalAsyncId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PLocalAsyncId* other);
  friend void swap(PLocalAsyncId& a, PLocalAsyncId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PLocalAsyncId* New() const final {
    return CreateMaybeMessage<PLocalAsyncId>(nullptr);
  }

  PLocalAsyncId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PLocalAsyncId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PLocalAsyncId& from);
  void MergeFrom(const PLocalAsyncId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PLocalAsyncId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 asyncId = 1;
  void clear_asyncid();
  static const int kAsyncIdFieldNumber = 1;
  ::google::protobuf::int32 asyncid() const;
  void set_asyncid(::google::protobuf::int32 value);

  // int32 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PLocalAsyncId)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 asyncid_;
  ::google::protobuf::int32 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PSpanEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PSpanEvent) */ {
 public:
  PSpanEvent();
  virtual ~PSpanEvent();

  PSpanEvent(const PSpanEvent& from);

  inline PSpanEvent& operator=(const PSpanEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSpanEvent(PSpanEvent&& from) noexcept
    : PSpanEvent() {
    *this = ::std::move(from);
  }

  inline PSpanEvent& operator=(PSpanEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PSpanEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSpanEvent* internal_default_instance() {
    return reinterpret_cast<const PSpanEvent*>(
               &_PSpanEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PSpanEvent* other);
  friend void swap(PSpanEvent& a, PSpanEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSpanEvent* New() const final {
    return CreateMaybeMessage<PSpanEvent>(nullptr);
  }

  PSpanEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSpanEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PSpanEvent& from);
  void MergeFrom(const PSpanEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSpanEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PAnnotation annotation = 6;
  int annotation_size() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 6;
  ::PAnnotation* mutable_annotation(int index);
  ::google::protobuf::RepeatedPtrField< ::PAnnotation >*
      mutable_annotation();
  const ::PAnnotation& annotation(int index) const;
  ::PAnnotation* add_annotation();
  const ::google::protobuf::RepeatedPtrField< ::PAnnotation >&
      annotation() const;

  // .PIntStringValue exceptionInfo = 11;
  bool has_exceptioninfo() const;
  void clear_exceptioninfo();
  static const int kExceptionInfoFieldNumber = 11;
  const ::PIntStringValue& exceptioninfo() const;
  ::PIntStringValue* release_exceptioninfo();
  ::PIntStringValue* mutable_exceptioninfo();
  void set_allocated_exceptioninfo(::PIntStringValue* exceptioninfo);

  // .v1.PNextEvent nextEvent = 12;
  bool has_nextevent() const;
  void clear_nextevent();
  static const int kNextEventFieldNumber = 12;
  const ::v1::PNextEvent& nextevent() const;
  ::v1::PNextEvent* release_nextevent();
  ::v1::PNextEvent* mutable_nextevent();
  void set_allocated_nextevent(::v1::PNextEvent* nextevent);

  // int32 sequence = 1;
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // int32 depth = 2;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // int32 startElapsed = 3;
  void clear_startelapsed();
  static const int kStartElapsedFieldNumber = 3;
  ::google::protobuf::int32 startelapsed() const;
  void set_startelapsed(::google::protobuf::int32 value);

  // int32 endElapsed = 4;
  void clear_endelapsed();
  static const int kEndElapsedFieldNumber = 4;
  ::google::protobuf::int32 endelapsed() const;
  void set_endelapsed(::google::protobuf::int32 value);

  // sint32 serviceType = 5;
  void clear_servicetype();
  static const int kServiceTypeFieldNumber = 5;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // sint32 apiId = 10;
  void clear_apiid();
  static const int kApiIdFieldNumber = 10;
  ::google::protobuf::int32 apiid() const;
  void set_apiid(::google::protobuf::int32 value);

  // int32 asyncEvent = 13;
  void clear_asyncevent();
  static const int kAsyncEventFieldNumber = 13;
  ::google::protobuf::int32 asyncevent() const;
  void set_asyncevent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PSpanEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PAnnotation > annotation_;
  ::PIntStringValue* exceptioninfo_;
  ::v1::PNextEvent* nextevent_;
  ::google::protobuf::int32 sequence_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 startelapsed_;
  ::google::protobuf::int32 endelapsed_;
  ::google::protobuf::int32 servicetype_;
  ::google::protobuf::int32 apiid_;
  ::google::protobuf::int32 asyncevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PNextEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PNextEvent) */ {
 public:
  PNextEvent();
  virtual ~PNextEvent();

  PNextEvent(const PNextEvent& from);

  inline PNextEvent& operator=(const PNextEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PNextEvent(PNextEvent&& from) noexcept
    : PNextEvent() {
    *this = ::std::move(from);
  }

  inline PNextEvent& operator=(PNextEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PNextEvent& default_instance();

  enum FieldCase {
    kMessageEvent = 1,
    FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNextEvent* internal_default_instance() {
    return reinterpret_cast<const PNextEvent*>(
               &_PNextEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PNextEvent* other);
  friend void swap(PNextEvent& a, PNextEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PNextEvent* New() const final {
    return CreateMaybeMessage<PNextEvent>(nullptr);
  }

  PNextEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PNextEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PNextEvent& from);
  void MergeFrom(const PNextEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNextEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .v1.PMessageEvent messageEvent = 1;
  bool has_messageevent() const;
  void clear_messageevent();
  static const int kMessageEventFieldNumber = 1;
  const ::v1::PMessageEvent& messageevent() const;
  ::v1::PMessageEvent* release_messageevent();
  ::v1::PMessageEvent* mutable_messageevent();
  void set_allocated_messageevent(::v1::PMessageEvent* messageevent);

  void clear_field();
  FieldCase field_case() const;
  // @@protoc_insertion_point(class_scope:v1.PNextEvent)
 private:
  class HasBitSetters;
  void set_has_messageevent();

  inline bool has_field() const;
  inline void clear_has_field();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FieldUnion {
    FieldUnion() {}
    ::v1::PMessageEvent* messageevent_;
  } field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PMessageEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PMessageEvent) */ {
 public:
  PMessageEvent();
  virtual ~PMessageEvent();

  PMessageEvent(const PMessageEvent& from);

  inline PMessageEvent& operator=(const PMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMessageEvent(PMessageEvent&& from) noexcept
    : PMessageEvent() {
    *this = ::std::move(from);
  }

  inline PMessageEvent& operator=(PMessageEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PMessageEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PMessageEvent* internal_default_instance() {
    return reinterpret_cast<const PMessageEvent*>(
               &_PMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PMessageEvent* other);
  friend void swap(PMessageEvent& a, PMessageEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMessageEvent* New() const final {
    return CreateMaybeMessage<PMessageEvent>(nullptr);
  }

  PMessageEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PMessageEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PMessageEvent& from);
  void MergeFrom(const PMessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMessageEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string endPoint = 2;
  void clear_endpoint();
  static const int kEndPointFieldNumber = 2;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string destinationId = 3;
  void clear_destinationid();
  static const int kDestinationIdFieldNumber = 3;
  const ::std::string& destinationid() const;
  void set_destinationid(const ::std::string& value);
  #if LANG_CXX11
  void set_destinationid(::std::string&& value);
  #endif
  void set_destinationid(const char* value);
  void set_destinationid(const char* value, size_t size);
  ::std::string* mutable_destinationid();
  ::std::string* release_destinationid();
  void set_allocated_destinationid(::std::string* destinationid);

  // sfixed64 nextSpanId = 1;
  void clear_nextspanid();
  static const int kNextSpanIdFieldNumber = 1;
  ::google::protobuf::int64 nextspanid() const;
  void set_nextspanid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:v1.PMessageEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr destinationid_;
  ::google::protobuf::int64 nextspanid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PSpanChunk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PSpanChunk) */ {
 public:
  PSpanChunk();
  virtual ~PSpanChunk();

  PSpanChunk(const PSpanChunk& from);

  inline PSpanChunk& operator=(const PSpanChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSpanChunk(PSpanChunk&& from) noexcept
    : PSpanChunk() {
    *this = ::std::move(from);
  }

  inline PSpanChunk& operator=(PSpanChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PSpanChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSpanChunk* internal_default_instance() {
    return reinterpret_cast<const PSpanChunk*>(
               &_PSpanChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PSpanChunk* other);
  friend void swap(PSpanChunk& a, PSpanChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSpanChunk* New() const final {
    return CreateMaybeMessage<PSpanChunk>(nullptr);
  }

  PSpanChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSpanChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PSpanChunk& from);
  void MergeFrom(const PSpanChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSpanChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .v1.PSpanEvent spanEvent = 5;
  int spanevent_size() const;
  void clear_spanevent();
  static const int kSpanEventFieldNumber = 5;
  ::v1::PSpanEvent* mutable_spanevent(int index);
  ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >*
      mutable_spanevent();
  const ::v1::PSpanEvent& spanevent(int index) const;
  ::v1::PSpanEvent* add_spanevent();
  const ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >&
      spanevent() const;

  // string endPoint = 4;
  void clear_endpoint();
  static const int kEndPointFieldNumber = 4;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // .v1.PTransactionId transactionId = 2;
  bool has_transactionid() const;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  const ::v1::PTransactionId& transactionid() const;
  ::v1::PTransactionId* release_transactionid();
  ::v1::PTransactionId* mutable_transactionid();
  void set_allocated_transactionid(::v1::PTransactionId* transactionid);

  // .v1.PLocalAsyncId localAsyncId = 8;
  bool has_localasyncid() const;
  void clear_localasyncid();
  static const int kLocalAsyncIdFieldNumber = 8;
  const ::v1::PLocalAsyncId& localasyncid() const;
  ::v1::PLocalAsyncId* release_localasyncid();
  ::v1::PLocalAsyncId* mutable_localasyncid();
  void set_allocated_localasyncid(::v1::PLocalAsyncId* localasyncid);

  // sfixed64 spanId = 3;
  void clear_spanid();
  static const int kSpanIdFieldNumber = 3;
  ::google::protobuf::int64 spanid() const;
  void set_spanid(::google::protobuf::int64 value);

  // int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int32 applicationServiceType = 6;
  void clear_applicationservicetype();
  static const int kApplicationServiceTypeFieldNumber = 6;
  ::google::protobuf::int32 applicationservicetype() const;
  void set_applicationservicetype(::google::protobuf::int32 value);

  // int64 keyTime = 7;
  void clear_keytime();
  static const int kKeyTimeFieldNumber = 7;
  ::google::protobuf::int64 keytime() const;
  void set_keytime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:v1.PSpanChunk)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent > spanevent_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::v1::PTransactionId* transactionid_;
  ::v1::PLocalAsyncId* localasyncid_;
  ::google::protobuf::int64 spanid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 applicationservicetype_;
  ::google::protobuf::int64 keytime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PResult) */ {
 public:
  PResult();
  virtual ~PResult();

  PResult(const PResult& from);

  inline PResult& operator=(const PResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PResult(PResult&& from) noexcept
    : PResult() {
    *this = ::std::move(from);
  }

  inline PResult& operator=(PResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PResult* internal_default_instance() {
    return reinterpret_cast<const PResult*>(
               &_PResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PResult* other);
  friend void swap(PResult& a, PResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PResult* New() const final {
    return CreateMaybeMessage<PResult>(nullptr);
  }

  PResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PResult& from);
  void MergeFrom(const PResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:v1.PResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PSqlMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PSqlMetaData) */ {
 public:
  PSqlMetaData();
  virtual ~PSqlMetaData();

  PSqlMetaData(const PSqlMetaData& from);

  inline PSqlMetaData& operator=(const PSqlMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSqlMetaData(PSqlMetaData&& from) noexcept
    : PSqlMetaData() {
    *this = ::std::move(from);
  }

  inline PSqlMetaData& operator=(PSqlMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PSqlMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSqlMetaData* internal_default_instance() {
    return reinterpret_cast<const PSqlMetaData*>(
               &_PSqlMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PSqlMetaData* other);
  friend void swap(PSqlMetaData& a, PSqlMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSqlMetaData* New() const final {
    return CreateMaybeMessage<PSqlMetaData>(nullptr);
  }

  PSqlMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSqlMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PSqlMetaData& from);
  void MergeFrom(const PSqlMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSqlMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql = 2;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // int32 sqlId = 1;
  void clear_sqlid();
  static const int kSqlIdFieldNumber = 1;
  ::google::protobuf::int32 sqlid() const;
  void set_sqlid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PSqlMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::int32 sqlid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PApiMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PApiMetaData) */ {
 public:
  PApiMetaData();
  virtual ~PApiMetaData();

  PApiMetaData(const PApiMetaData& from);

  inline PApiMetaData& operator=(const PApiMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PApiMetaData(PApiMetaData&& from) noexcept
    : PApiMetaData() {
    *this = ::std::move(from);
  }

  inline PApiMetaData& operator=(PApiMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PApiMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PApiMetaData* internal_default_instance() {
    return reinterpret_cast<const PApiMetaData*>(
               &_PApiMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PApiMetaData* other);
  friend void swap(PApiMetaData& a, PApiMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PApiMetaData* New() const final {
    return CreateMaybeMessage<PApiMetaData>(nullptr);
  }

  PApiMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PApiMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PApiMetaData& from);
  void MergeFrom(const PApiMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PApiMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string apiInfo = 2;
  void clear_apiinfo();
  static const int kApiInfoFieldNumber = 2;
  const ::std::string& apiinfo() const;
  void set_apiinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_apiinfo(::std::string&& value);
  #endif
  void set_apiinfo(const char* value);
  void set_apiinfo(const char* value, size_t size);
  ::std::string* mutable_apiinfo();
  ::std::string* release_apiinfo();
  void set_allocated_apiinfo(::std::string* apiinfo);

  // int32 apiId = 1;
  void clear_apiid();
  static const int kApiIdFieldNumber = 1;
  ::google::protobuf::int32 apiid() const;
  void set_apiid(::google::protobuf::int32 value);

  // int32 line = 3;
  void clear_line();
  static const int kLineFieldNumber = 3;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PApiMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr apiinfo_;
  ::google::protobuf::int32 apiid_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// -------------------------------------------------------------------

class PStringMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v1.PStringMetaData) */ {
 public:
  PStringMetaData();
  virtual ~PStringMetaData();

  PStringMetaData(const PStringMetaData& from);

  inline PStringMetaData& operator=(const PStringMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PStringMetaData(PStringMetaData&& from) noexcept
    : PStringMetaData() {
    *this = ::std::move(from);
  }

  inline PStringMetaData& operator=(PStringMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PStringMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PStringMetaData* internal_default_instance() {
    return reinterpret_cast<const PStringMetaData*>(
               &_PStringMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(PStringMetaData* other);
  friend void swap(PStringMetaData& a, PStringMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PStringMetaData* New() const final {
    return CreateMaybeMessage<PStringMetaData>(nullptr);
  }

  PStringMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PStringMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PStringMetaData& from);
  void MergeFrom(const PStringMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PStringMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stringValue = 2;
  void clear_stringvalue();
  static const int kStringValueFieldNumber = 2;
  const ::std::string& stringvalue() const;
  void set_stringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_stringvalue(::std::string&& value);
  #endif
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  ::std::string* mutable_stringvalue();
  ::std::string* release_stringvalue();
  void set_allocated_stringvalue(::std::string* stringvalue);

  // int32 stringId = 1;
  void clear_stringid();
  static const int kStringIdFieldNumber = 1;
  ::google::protobuf::int32 stringid() const;
  void set_stringid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:v1.PStringMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stringvalue_;
  ::google::protobuf::int32 stringid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Span_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSpanMessage

// .v1.PSpan span = 1;
inline bool PSpanMessage::has_span() const {
  return field_case() == kSpan;
}
inline void PSpanMessage::set_has_span() {
  _oneof_case_[0] = kSpan;
}
inline void PSpanMessage::clear_span() {
  if (has_span()) {
    delete field_.span_;
    clear_has_field();
  }
}
inline ::v1::PSpan* PSpanMessage::release_span() {
  // @@protoc_insertion_point(field_release:v1.PSpanMessage.span)
  if (has_span()) {
    clear_has_field();
      ::v1::PSpan* temp = field_.span_;
    field_.span_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::PSpan& PSpanMessage::span() const {
  // @@protoc_insertion_point(field_get:v1.PSpanMessage.span)
  return has_span()
      ? *field_.span_
      : *reinterpret_cast< ::v1::PSpan*>(&::v1::_PSpan_default_instance_);
}
inline ::v1::PSpan* PSpanMessage::mutable_span() {
  if (!has_span()) {
    clear_field();
    set_has_span();
    field_.span_ = CreateMaybeMessage< ::v1::PSpan >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanMessage.span)
  return field_.span_;
}

// .v1.PSpanChunk spanChunk = 2;
inline bool PSpanMessage::has_spanchunk() const {
  return field_case() == kSpanChunk;
}
inline void PSpanMessage::set_has_spanchunk() {
  _oneof_case_[0] = kSpanChunk;
}
inline void PSpanMessage::clear_spanchunk() {
  if (has_spanchunk()) {
    delete field_.spanchunk_;
    clear_has_field();
  }
}
inline ::v1::PSpanChunk* PSpanMessage::release_spanchunk() {
  // @@protoc_insertion_point(field_release:v1.PSpanMessage.spanChunk)
  if (has_spanchunk()) {
    clear_has_field();
      ::v1::PSpanChunk* temp = field_.spanchunk_;
    field_.spanchunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::PSpanChunk& PSpanMessage::spanchunk() const {
  // @@protoc_insertion_point(field_get:v1.PSpanMessage.spanChunk)
  return has_spanchunk()
      ? *field_.spanchunk_
      : *reinterpret_cast< ::v1::PSpanChunk*>(&::v1::_PSpanChunk_default_instance_);
}
inline ::v1::PSpanChunk* PSpanMessage::mutable_spanchunk() {
  if (!has_spanchunk()) {
    clear_field();
    set_has_spanchunk();
    field_.spanchunk_ = CreateMaybeMessage< ::v1::PSpanChunk >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanMessage.spanChunk)
  return field_.spanchunk_;
}

inline bool PSpanMessage::has_field() const {
  return field_case() != FIELD_NOT_SET;
}
inline void PSpanMessage::clear_has_field() {
  _oneof_case_[0] = FIELD_NOT_SET;
}
inline PSpanMessage::FieldCase PSpanMessage::field_case() const {
  return PSpanMessage::FieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PSpan

// int32 version = 1;
inline void PSpan::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 PSpan::version() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.version)
  return version_;
}
inline void PSpan::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.version)
}

// .v1.PTransactionId transactionId = 2;
inline bool PSpan::has_transactionid() const {
  return this != internal_default_instance() && transactionid_ != nullptr;
}
inline void PSpan::clear_transactionid() {
  if (GetArenaNoVirtual() == nullptr && transactionid_ != nullptr) {
    delete transactionid_;
  }
  transactionid_ = nullptr;
}
inline const ::v1::PTransactionId& PSpan::transactionid() const {
  const ::v1::PTransactionId* p = transactionid_;
  // @@protoc_insertion_point(field_get:v1.PSpan.transactionId)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PTransactionId*>(
      &::v1::_PTransactionId_default_instance_);
}
inline ::v1::PTransactionId* PSpan::release_transactionid() {
  // @@protoc_insertion_point(field_release:v1.PSpan.transactionId)
  
  ::v1::PTransactionId* temp = transactionid_;
  transactionid_ = nullptr;
  return temp;
}
inline ::v1::PTransactionId* PSpan::mutable_transactionid() {
  
  if (transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PTransactionId>(GetArenaNoVirtual());
    transactionid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpan.transactionId)
  return transactionid_;
}
inline void PSpan::set_allocated_transactionid(::v1::PTransactionId* transactionid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transactionid_;
  }
  if (transactionid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transactionid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpan.transactionId)
}

// sfixed64 spanId = 3;
inline void PSpan::clear_spanid() {
  spanid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PSpan::spanid() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.spanId)
  return spanid_;
}
inline void PSpan::set_spanid(::google::protobuf::int64 value) {
  
  spanid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.spanId)
}

// sfixed64 parentSpanId = 4;
inline void PSpan::clear_parentspanid() {
  parentspanid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PSpan::parentspanid() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.parentSpanId)
  return parentspanid_;
}
inline void PSpan::set_parentspanid(::google::protobuf::int64 value) {
  
  parentspanid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.parentSpanId)
}

// int64 startTime = 5;
inline void PSpan::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PSpan::starttime() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.startTime)
  return starttime_;
}
inline void PSpan::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.startTime)
}

// int32 elapsed = 6;
inline void PSpan::clear_elapsed() {
  elapsed_ = 0;
}
inline ::google::protobuf::int32 PSpan::elapsed() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.elapsed)
  return elapsed_;
}
inline void PSpan::set_elapsed(::google::protobuf::int32 value) {
  
  elapsed_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.elapsed)
}

// int32 apiId = 7;
inline void PSpan::clear_apiid() {
  apiid_ = 0;
}
inline ::google::protobuf::int32 PSpan::apiid() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.apiId)
  return apiid_;
}
inline void PSpan::set_apiid(::google::protobuf::int32 value) {
  
  apiid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.apiId)
}

// int32 serviceType = 8;
inline void PSpan::clear_servicetype() {
  servicetype_ = 0;
}
inline ::google::protobuf::int32 PSpan::servicetype() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.serviceType)
  return servicetype_;
}
inline void PSpan::set_servicetype(::google::protobuf::int32 value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.serviceType)
}

// .v1.PAcceptEvent acceptEvent = 9;
inline bool PSpan::has_acceptevent() const {
  return this != internal_default_instance() && acceptevent_ != nullptr;
}
inline void PSpan::clear_acceptevent() {
  if (GetArenaNoVirtual() == nullptr && acceptevent_ != nullptr) {
    delete acceptevent_;
  }
  acceptevent_ = nullptr;
}
inline const ::v1::PAcceptEvent& PSpan::acceptevent() const {
  const ::v1::PAcceptEvent* p = acceptevent_;
  // @@protoc_insertion_point(field_get:v1.PSpan.acceptEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PAcceptEvent*>(
      &::v1::_PAcceptEvent_default_instance_);
}
inline ::v1::PAcceptEvent* PSpan::release_acceptevent() {
  // @@protoc_insertion_point(field_release:v1.PSpan.acceptEvent)
  
  ::v1::PAcceptEvent* temp = acceptevent_;
  acceptevent_ = nullptr;
  return temp;
}
inline ::v1::PAcceptEvent* PSpan::mutable_acceptevent() {
  
  if (acceptevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PAcceptEvent>(GetArenaNoVirtual());
    acceptevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpan.acceptEvent)
  return acceptevent_;
}
inline void PSpan::set_allocated_acceptevent(::v1::PAcceptEvent* acceptevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acceptevent_;
  }
  if (acceptevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceptevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceptevent, submessage_arena);
    }
    
  } else {
    
  }
  acceptevent_ = acceptevent;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpan.acceptEvent)
}

// repeated .PAnnotation annotation = 10;
inline int PSpan::annotation_size() const {
  return annotation_.size();
}
inline ::PAnnotation* PSpan::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:v1.PSpan.annotation)
  return annotation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PAnnotation >*
PSpan::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:v1.PSpan.annotation)
  return &annotation_;
}
inline const ::PAnnotation& PSpan::annotation(int index) const {
  // @@protoc_insertion_point(field_get:v1.PSpan.annotation)
  return annotation_.Get(index);
}
inline ::PAnnotation* PSpan::add_annotation() {
  // @@protoc_insertion_point(field_add:v1.PSpan.annotation)
  return annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PAnnotation >&
PSpan::annotation() const {
  // @@protoc_insertion_point(field_list:v1.PSpan.annotation)
  return annotation_;
}

// int32 flag = 11;
inline void PSpan::clear_flag() {
  flag_ = 0;
}
inline ::google::protobuf::int32 PSpan::flag() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.flag)
  return flag_;
}
inline void PSpan::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.flag)
}

// sint32 err = 12;
inline void PSpan::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 PSpan::err() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.err)
  return err_;
}
inline void PSpan::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.err)
}

// repeated .v1.PSpanEvent spanEvent = 13;
inline int PSpan::spanevent_size() const {
  return spanevent_.size();
}
inline void PSpan::clear_spanevent() {
  spanevent_.Clear();
}
inline ::v1::PSpanEvent* PSpan::mutable_spanevent(int index) {
  // @@protoc_insertion_point(field_mutable:v1.PSpan.spanEvent)
  return spanevent_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >*
PSpan::mutable_spanevent() {
  // @@protoc_insertion_point(field_mutable_list:v1.PSpan.spanEvent)
  return &spanevent_;
}
inline const ::v1::PSpanEvent& PSpan::spanevent(int index) const {
  // @@protoc_insertion_point(field_get:v1.PSpan.spanEvent)
  return spanevent_.Get(index);
}
inline ::v1::PSpanEvent* PSpan::add_spanevent() {
  // @@protoc_insertion_point(field_add:v1.PSpan.spanEvent)
  return spanevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >&
PSpan::spanevent() const {
  // @@protoc_insertion_point(field_list:v1.PSpan.spanEvent)
  return spanevent_;
}

// .PIntStringValue exceptionInfo = 14;
inline bool PSpan::has_exceptioninfo() const {
  return this != internal_default_instance() && exceptioninfo_ != nullptr;
}
inline const ::PIntStringValue& PSpan::exceptioninfo() const {
  const ::PIntStringValue* p = exceptioninfo_;
  // @@protoc_insertion_point(field_get:v1.PSpan.exceptionInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::PIntStringValue*>(
      &::_PIntStringValue_default_instance_);
}
inline ::PIntStringValue* PSpan::release_exceptioninfo() {
  // @@protoc_insertion_point(field_release:v1.PSpan.exceptionInfo)
  
  ::PIntStringValue* temp = exceptioninfo_;
  exceptioninfo_ = nullptr;
  return temp;
}
inline ::PIntStringValue* PSpan::mutable_exceptioninfo() {
  
  if (exceptioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PIntStringValue>(GetArenaNoVirtual());
    exceptioninfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpan.exceptionInfo)
  return exceptioninfo_;
}
inline void PSpan::set_allocated_exceptioninfo(::PIntStringValue* exceptioninfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceptioninfo_);
  }
  if (exceptioninfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exceptioninfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceptioninfo, submessage_arena);
    }
    
  } else {
    
  }
  exceptioninfo_ = exceptioninfo;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpan.exceptionInfo)
}

// int32 applicationServiceType = 15;
inline void PSpan::clear_applicationservicetype() {
  applicationservicetype_ = 0;
}
inline ::google::protobuf::int32 PSpan::applicationservicetype() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.applicationServiceType)
  return applicationservicetype_;
}
inline void PSpan::set_applicationservicetype(::google::protobuf::int32 value) {
  
  applicationservicetype_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.applicationServiceType)
}

// int32 loggingTransactionInfo = 16;
inline void PSpan::clear_loggingtransactioninfo() {
  loggingtransactioninfo_ = 0;
}
inline ::google::protobuf::int32 PSpan::loggingtransactioninfo() const {
  // @@protoc_insertion_point(field_get:v1.PSpan.loggingTransactionInfo)
  return loggingtransactioninfo_;
}
inline void PSpan::set_loggingtransactioninfo(::google::protobuf::int32 value) {
  
  loggingtransactioninfo_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpan.loggingTransactionInfo)
}

// -------------------------------------------------------------------

// PTransactionId

// string agentId = 1;
inline void PTransactionId::clear_agentid() {
  agentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PTransactionId::agentid() const {
  // @@protoc_insertion_point(field_get:v1.PTransactionId.agentId)
  return agentid_.GetNoArena();
}
inline void PTransactionId::set_agentid(const ::std::string& value) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PTransactionId.agentId)
}
#if LANG_CXX11
inline void PTransactionId::set_agentid(::std::string&& value) {
  
  agentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PTransactionId.agentId)
}
#endif
inline void PTransactionId::set_agentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PTransactionId.agentId)
}
inline void PTransactionId::set_agentid(const char* value, size_t size) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PTransactionId.agentId)
}
inline ::std::string* PTransactionId::mutable_agentid() {
  
  // @@protoc_insertion_point(field_mutable:v1.PTransactionId.agentId)
  return agentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PTransactionId::release_agentid() {
  // @@protoc_insertion_point(field_release:v1.PTransactionId.agentId)
  
  return agentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTransactionId::set_allocated_agentid(::std::string* agentid) {
  if (agentid != nullptr) {
    
  } else {
    
  }
  agentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agentid);
  // @@protoc_insertion_point(field_set_allocated:v1.PTransactionId.agentId)
}

// int64 agentStartTime = 2;
inline void PTransactionId::clear_agentstarttime() {
  agentstarttime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PTransactionId::agentstarttime() const {
  // @@protoc_insertion_point(field_get:v1.PTransactionId.agentStartTime)
  return agentstarttime_;
}
inline void PTransactionId::set_agentstarttime(::google::protobuf::int64 value) {
  
  agentstarttime_ = value;
  // @@protoc_insertion_point(field_set:v1.PTransactionId.agentStartTime)
}

// int64 sequence = 3;
inline void PTransactionId::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PTransactionId::sequence() const {
  // @@protoc_insertion_point(field_get:v1.PTransactionId.sequence)
  return sequence_;
}
inline void PTransactionId::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:v1.PTransactionId.sequence)
}

// -------------------------------------------------------------------

// PAcceptEvent

// string rpc = 1;
inline void PAcceptEvent::clear_rpc() {
  rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PAcceptEvent::rpc() const {
  // @@protoc_insertion_point(field_get:v1.PAcceptEvent.rpc)
  return rpc_.GetNoArena();
}
inline void PAcceptEvent::set_rpc(const ::std::string& value) {
  
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PAcceptEvent.rpc)
}
#if LANG_CXX11
inline void PAcceptEvent::set_rpc(::std::string&& value) {
  
  rpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PAcceptEvent.rpc)
}
#endif
inline void PAcceptEvent::set_rpc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PAcceptEvent.rpc)
}
inline void PAcceptEvent::set_rpc(const char* value, size_t size) {
  
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PAcceptEvent.rpc)
}
inline ::std::string* PAcceptEvent::mutable_rpc() {
  
  // @@protoc_insertion_point(field_mutable:v1.PAcceptEvent.rpc)
  return rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PAcceptEvent::release_rpc() {
  // @@protoc_insertion_point(field_release:v1.PAcceptEvent.rpc)
  
  return rpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PAcceptEvent::set_allocated_rpc(::std::string* rpc) {
  if (rpc != nullptr) {
    
  } else {
    
  }
  rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc);
  // @@protoc_insertion_point(field_set_allocated:v1.PAcceptEvent.rpc)
}

// string endPoint = 2;
inline void PAcceptEvent::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PAcceptEvent::endpoint() const {
  // @@protoc_insertion_point(field_get:v1.PAcceptEvent.endPoint)
  return endpoint_.GetNoArena();
}
inline void PAcceptEvent::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PAcceptEvent.endPoint)
}
#if LANG_CXX11
inline void PAcceptEvent::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PAcceptEvent.endPoint)
}
#endif
inline void PAcceptEvent::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PAcceptEvent.endPoint)
}
inline void PAcceptEvent::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PAcceptEvent.endPoint)
}
inline ::std::string* PAcceptEvent::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:v1.PAcceptEvent.endPoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PAcceptEvent::release_endpoint() {
  // @@protoc_insertion_point(field_release:v1.PAcceptEvent.endPoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PAcceptEvent::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:v1.PAcceptEvent.endPoint)
}

// string remoteAddr = 3;
inline void PAcceptEvent::clear_remoteaddr() {
  remoteaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PAcceptEvent::remoteaddr() const {
  // @@protoc_insertion_point(field_get:v1.PAcceptEvent.remoteAddr)
  return remoteaddr_.GetNoArena();
}
inline void PAcceptEvent::set_remoteaddr(const ::std::string& value) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PAcceptEvent.remoteAddr)
}
#if LANG_CXX11
inline void PAcceptEvent::set_remoteaddr(::std::string&& value) {
  
  remoteaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PAcceptEvent.remoteAddr)
}
#endif
inline void PAcceptEvent::set_remoteaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PAcceptEvent.remoteAddr)
}
inline void PAcceptEvent::set_remoteaddr(const char* value, size_t size) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PAcceptEvent.remoteAddr)
}
inline ::std::string* PAcceptEvent::mutable_remoteaddr() {
  
  // @@protoc_insertion_point(field_mutable:v1.PAcceptEvent.remoteAddr)
  return remoteaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PAcceptEvent::release_remoteaddr() {
  // @@protoc_insertion_point(field_release:v1.PAcceptEvent.remoteAddr)
  
  return remoteaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PAcceptEvent::set_allocated_remoteaddr(::std::string* remoteaddr) {
  if (remoteaddr != nullptr) {
    
  } else {
    
  }
  remoteaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remoteaddr);
  // @@protoc_insertion_point(field_set_allocated:v1.PAcceptEvent.remoteAddr)
}

// .v1.PParentInfo parentInfo = 4;
inline bool PAcceptEvent::has_parentinfo() const {
  return this != internal_default_instance() && parentinfo_ != nullptr;
}
inline void PAcceptEvent::clear_parentinfo() {
  if (GetArenaNoVirtual() == nullptr && parentinfo_ != nullptr) {
    delete parentinfo_;
  }
  parentinfo_ = nullptr;
}
inline const ::v1::PParentInfo& PAcceptEvent::parentinfo() const {
  const ::v1::PParentInfo* p = parentinfo_;
  // @@protoc_insertion_point(field_get:v1.PAcceptEvent.parentInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PParentInfo*>(
      &::v1::_PParentInfo_default_instance_);
}
inline ::v1::PParentInfo* PAcceptEvent::release_parentinfo() {
  // @@protoc_insertion_point(field_release:v1.PAcceptEvent.parentInfo)
  
  ::v1::PParentInfo* temp = parentinfo_;
  parentinfo_ = nullptr;
  return temp;
}
inline ::v1::PParentInfo* PAcceptEvent::mutable_parentinfo() {
  
  if (parentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PParentInfo>(GetArenaNoVirtual());
    parentinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PAcceptEvent.parentInfo)
  return parentinfo_;
}
inline void PAcceptEvent::set_allocated_parentinfo(::v1::PParentInfo* parentinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parentinfo_;
  }
  if (parentinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parentinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parentinfo, submessage_arena);
    }
    
  } else {
    
  }
  parentinfo_ = parentinfo;
  // @@protoc_insertion_point(field_set_allocated:v1.PAcceptEvent.parentInfo)
}

// -------------------------------------------------------------------

// PParentInfo

// string parentApplicationName = 1;
inline void PParentInfo::clear_parentapplicationname() {
  parentapplicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PParentInfo::parentapplicationname() const {
  // @@protoc_insertion_point(field_get:v1.PParentInfo.parentApplicationName)
  return parentapplicationname_.GetNoArena();
}
inline void PParentInfo::set_parentapplicationname(const ::std::string& value) {
  
  parentapplicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PParentInfo.parentApplicationName)
}
#if LANG_CXX11
inline void PParentInfo::set_parentapplicationname(::std::string&& value) {
  
  parentapplicationname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PParentInfo.parentApplicationName)
}
#endif
inline void PParentInfo::set_parentapplicationname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentapplicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PParentInfo.parentApplicationName)
}
inline void PParentInfo::set_parentapplicationname(const char* value, size_t size) {
  
  parentapplicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PParentInfo.parentApplicationName)
}
inline ::std::string* PParentInfo::mutable_parentapplicationname() {
  
  // @@protoc_insertion_point(field_mutable:v1.PParentInfo.parentApplicationName)
  return parentapplicationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PParentInfo::release_parentapplicationname() {
  // @@protoc_insertion_point(field_release:v1.PParentInfo.parentApplicationName)
  
  return parentapplicationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PParentInfo::set_allocated_parentapplicationname(::std::string* parentapplicationname) {
  if (parentapplicationname != nullptr) {
    
  } else {
    
  }
  parentapplicationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parentapplicationname);
  // @@protoc_insertion_point(field_set_allocated:v1.PParentInfo.parentApplicationName)
}

// int32 parentApplicationType = 2;
inline void PParentInfo::clear_parentapplicationtype() {
  parentapplicationtype_ = 0;
}
inline ::google::protobuf::int32 PParentInfo::parentapplicationtype() const {
  // @@protoc_insertion_point(field_get:v1.PParentInfo.parentApplicationType)
  return parentapplicationtype_;
}
inline void PParentInfo::set_parentapplicationtype(::google::protobuf::int32 value) {
  
  parentapplicationtype_ = value;
  // @@protoc_insertion_point(field_set:v1.PParentInfo.parentApplicationType)
}

// string acceptorHost = 3;
inline void PParentInfo::clear_acceptorhost() {
  acceptorhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PParentInfo::acceptorhost() const {
  // @@protoc_insertion_point(field_get:v1.PParentInfo.acceptorHost)
  return acceptorhost_.GetNoArena();
}
inline void PParentInfo::set_acceptorhost(const ::std::string& value) {
  
  acceptorhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PParentInfo.acceptorHost)
}
#if LANG_CXX11
inline void PParentInfo::set_acceptorhost(::std::string&& value) {
  
  acceptorhost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PParentInfo.acceptorHost)
}
#endif
inline void PParentInfo::set_acceptorhost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptorhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PParentInfo.acceptorHost)
}
inline void PParentInfo::set_acceptorhost(const char* value, size_t size) {
  
  acceptorhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PParentInfo.acceptorHost)
}
inline ::std::string* PParentInfo::mutable_acceptorhost() {
  
  // @@protoc_insertion_point(field_mutable:v1.PParentInfo.acceptorHost)
  return acceptorhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PParentInfo::release_acceptorhost() {
  // @@protoc_insertion_point(field_release:v1.PParentInfo.acceptorHost)
  
  return acceptorhost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PParentInfo::set_allocated_acceptorhost(::std::string* acceptorhost) {
  if (acceptorhost != nullptr) {
    
  } else {
    
  }
  acceptorhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acceptorhost);
  // @@protoc_insertion_point(field_set_allocated:v1.PParentInfo.acceptorHost)
}

// -------------------------------------------------------------------

// PLocalAsyncId

// int32 asyncId = 1;
inline void PLocalAsyncId::clear_asyncid() {
  asyncid_ = 0;
}
inline ::google::protobuf::int32 PLocalAsyncId::asyncid() const {
  // @@protoc_insertion_point(field_get:v1.PLocalAsyncId.asyncId)
  return asyncid_;
}
inline void PLocalAsyncId::set_asyncid(::google::protobuf::int32 value) {
  
  asyncid_ = value;
  // @@protoc_insertion_point(field_set:v1.PLocalAsyncId.asyncId)
}

// int32 sequence = 2;
inline void PLocalAsyncId::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 PLocalAsyncId::sequence() const {
  // @@protoc_insertion_point(field_get:v1.PLocalAsyncId.sequence)
  return sequence_;
}
inline void PLocalAsyncId::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:v1.PLocalAsyncId.sequence)
}

// -------------------------------------------------------------------

// PSpanEvent

// int32 sequence = 1;
inline void PSpanEvent::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::sequence() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.sequence)
  return sequence_;
}
inline void PSpanEvent::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.sequence)
}

// int32 depth = 2;
inline void PSpanEvent::clear_depth() {
  depth_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::depth() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.depth)
  return depth_;
}
inline void PSpanEvent::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.depth)
}

// int32 startElapsed = 3;
inline void PSpanEvent::clear_startelapsed() {
  startelapsed_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::startelapsed() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.startElapsed)
  return startelapsed_;
}
inline void PSpanEvent::set_startelapsed(::google::protobuf::int32 value) {
  
  startelapsed_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.startElapsed)
}

// int32 endElapsed = 4;
inline void PSpanEvent::clear_endelapsed() {
  endelapsed_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::endelapsed() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.endElapsed)
  return endelapsed_;
}
inline void PSpanEvent::set_endelapsed(::google::protobuf::int32 value) {
  
  endelapsed_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.endElapsed)
}

// sint32 serviceType = 5;
inline void PSpanEvent::clear_servicetype() {
  servicetype_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::servicetype() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.serviceType)
  return servicetype_;
}
inline void PSpanEvent::set_servicetype(::google::protobuf::int32 value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.serviceType)
}

// repeated .PAnnotation annotation = 6;
inline int PSpanEvent::annotation_size() const {
  return annotation_.size();
}
inline ::PAnnotation* PSpanEvent::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:v1.PSpanEvent.annotation)
  return annotation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PAnnotation >*
PSpanEvent::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:v1.PSpanEvent.annotation)
  return &annotation_;
}
inline const ::PAnnotation& PSpanEvent::annotation(int index) const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.annotation)
  return annotation_.Get(index);
}
inline ::PAnnotation* PSpanEvent::add_annotation() {
  // @@protoc_insertion_point(field_add:v1.PSpanEvent.annotation)
  return annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PAnnotation >&
PSpanEvent::annotation() const {
  // @@protoc_insertion_point(field_list:v1.PSpanEvent.annotation)
  return annotation_;
}

// sint32 apiId = 10;
inline void PSpanEvent::clear_apiid() {
  apiid_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::apiid() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.apiId)
  return apiid_;
}
inline void PSpanEvent::set_apiid(::google::protobuf::int32 value) {
  
  apiid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.apiId)
}

// .PIntStringValue exceptionInfo = 11;
inline bool PSpanEvent::has_exceptioninfo() const {
  return this != internal_default_instance() && exceptioninfo_ != nullptr;
}
inline const ::PIntStringValue& PSpanEvent::exceptioninfo() const {
  const ::PIntStringValue* p = exceptioninfo_;
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.exceptionInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::PIntStringValue*>(
      &::_PIntStringValue_default_instance_);
}
inline ::PIntStringValue* PSpanEvent::release_exceptioninfo() {
  // @@protoc_insertion_point(field_release:v1.PSpanEvent.exceptionInfo)
  
  ::PIntStringValue* temp = exceptioninfo_;
  exceptioninfo_ = nullptr;
  return temp;
}
inline ::PIntStringValue* PSpanEvent::mutable_exceptioninfo() {
  
  if (exceptioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PIntStringValue>(GetArenaNoVirtual());
    exceptioninfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanEvent.exceptionInfo)
  return exceptioninfo_;
}
inline void PSpanEvent::set_allocated_exceptioninfo(::PIntStringValue* exceptioninfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceptioninfo_);
  }
  if (exceptioninfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exceptioninfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceptioninfo, submessage_arena);
    }
    
  } else {
    
  }
  exceptioninfo_ = exceptioninfo;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpanEvent.exceptionInfo)
}

// .v1.PNextEvent nextEvent = 12;
inline bool PSpanEvent::has_nextevent() const {
  return this != internal_default_instance() && nextevent_ != nullptr;
}
inline void PSpanEvent::clear_nextevent() {
  if (GetArenaNoVirtual() == nullptr && nextevent_ != nullptr) {
    delete nextevent_;
  }
  nextevent_ = nullptr;
}
inline const ::v1::PNextEvent& PSpanEvent::nextevent() const {
  const ::v1::PNextEvent* p = nextevent_;
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.nextEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PNextEvent*>(
      &::v1::_PNextEvent_default_instance_);
}
inline ::v1::PNextEvent* PSpanEvent::release_nextevent() {
  // @@protoc_insertion_point(field_release:v1.PSpanEvent.nextEvent)
  
  ::v1::PNextEvent* temp = nextevent_;
  nextevent_ = nullptr;
  return temp;
}
inline ::v1::PNextEvent* PSpanEvent::mutable_nextevent() {
  
  if (nextevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PNextEvent>(GetArenaNoVirtual());
    nextevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanEvent.nextEvent)
  return nextevent_;
}
inline void PSpanEvent::set_allocated_nextevent(::v1::PNextEvent* nextevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nextevent_;
  }
  if (nextevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nextevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nextevent, submessage_arena);
    }
    
  } else {
    
  }
  nextevent_ = nextevent;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpanEvent.nextEvent)
}

// int32 asyncEvent = 13;
inline void PSpanEvent::clear_asyncevent() {
  asyncevent_ = 0;
}
inline ::google::protobuf::int32 PSpanEvent::asyncevent() const {
  // @@protoc_insertion_point(field_get:v1.PSpanEvent.asyncEvent)
  return asyncevent_;
}
inline void PSpanEvent::set_asyncevent(::google::protobuf::int32 value) {
  
  asyncevent_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanEvent.asyncEvent)
}

// -------------------------------------------------------------------

// PNextEvent

// .v1.PMessageEvent messageEvent = 1;
inline bool PNextEvent::has_messageevent() const {
  return field_case() == kMessageEvent;
}
inline void PNextEvent::set_has_messageevent() {
  _oneof_case_[0] = kMessageEvent;
}
inline void PNextEvent::clear_messageevent() {
  if (has_messageevent()) {
    delete field_.messageevent_;
    clear_has_field();
  }
}
inline ::v1::PMessageEvent* PNextEvent::release_messageevent() {
  // @@protoc_insertion_point(field_release:v1.PNextEvent.messageEvent)
  if (has_messageevent()) {
    clear_has_field();
      ::v1::PMessageEvent* temp = field_.messageevent_;
    field_.messageevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::PMessageEvent& PNextEvent::messageevent() const {
  // @@protoc_insertion_point(field_get:v1.PNextEvent.messageEvent)
  return has_messageevent()
      ? *field_.messageevent_
      : *reinterpret_cast< ::v1::PMessageEvent*>(&::v1::_PMessageEvent_default_instance_);
}
inline ::v1::PMessageEvent* PNextEvent::mutable_messageevent() {
  if (!has_messageevent()) {
    clear_field();
    set_has_messageevent();
    field_.messageevent_ = CreateMaybeMessage< ::v1::PMessageEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:v1.PNextEvent.messageEvent)
  return field_.messageevent_;
}

inline bool PNextEvent::has_field() const {
  return field_case() != FIELD_NOT_SET;
}
inline void PNextEvent::clear_has_field() {
  _oneof_case_[0] = FIELD_NOT_SET;
}
inline PNextEvent::FieldCase PNextEvent::field_case() const {
  return PNextEvent::FieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PMessageEvent

// sfixed64 nextSpanId = 1;
inline void PMessageEvent::clear_nextspanid() {
  nextspanid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PMessageEvent::nextspanid() const {
  // @@protoc_insertion_point(field_get:v1.PMessageEvent.nextSpanId)
  return nextspanid_;
}
inline void PMessageEvent::set_nextspanid(::google::protobuf::int64 value) {
  
  nextspanid_ = value;
  // @@protoc_insertion_point(field_set:v1.PMessageEvent.nextSpanId)
}

// string endPoint = 2;
inline void PMessageEvent::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PMessageEvent::endpoint() const {
  // @@protoc_insertion_point(field_get:v1.PMessageEvent.endPoint)
  return endpoint_.GetNoArena();
}
inline void PMessageEvent::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PMessageEvent.endPoint)
}
#if LANG_CXX11
inline void PMessageEvent::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PMessageEvent.endPoint)
}
#endif
inline void PMessageEvent::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PMessageEvent.endPoint)
}
inline void PMessageEvent::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PMessageEvent.endPoint)
}
inline ::std::string* PMessageEvent::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:v1.PMessageEvent.endPoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PMessageEvent::release_endpoint() {
  // @@protoc_insertion_point(field_release:v1.PMessageEvent.endPoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PMessageEvent::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:v1.PMessageEvent.endPoint)
}

// string destinationId = 3;
inline void PMessageEvent::clear_destinationid() {
  destinationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PMessageEvent::destinationid() const {
  // @@protoc_insertion_point(field_get:v1.PMessageEvent.destinationId)
  return destinationid_.GetNoArena();
}
inline void PMessageEvent::set_destinationid(const ::std::string& value) {
  
  destinationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PMessageEvent.destinationId)
}
#if LANG_CXX11
inline void PMessageEvent::set_destinationid(::std::string&& value) {
  
  destinationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PMessageEvent.destinationId)
}
#endif
inline void PMessageEvent::set_destinationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destinationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PMessageEvent.destinationId)
}
inline void PMessageEvent::set_destinationid(const char* value, size_t size) {
  
  destinationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PMessageEvent.destinationId)
}
inline ::std::string* PMessageEvent::mutable_destinationid() {
  
  // @@protoc_insertion_point(field_mutable:v1.PMessageEvent.destinationId)
  return destinationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PMessageEvent::release_destinationid() {
  // @@protoc_insertion_point(field_release:v1.PMessageEvent.destinationId)
  
  return destinationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PMessageEvent::set_allocated_destinationid(::std::string* destinationid) {
  if (destinationid != nullptr) {
    
  } else {
    
  }
  destinationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destinationid);
  // @@protoc_insertion_point(field_set_allocated:v1.PMessageEvent.destinationId)
}

// -------------------------------------------------------------------

// PSpanChunk

// int32 version = 1;
inline void PSpanChunk::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 PSpanChunk::version() const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.version)
  return version_;
}
inline void PSpanChunk::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanChunk.version)
}

// .v1.PTransactionId transactionId = 2;
inline bool PSpanChunk::has_transactionid() const {
  return this != internal_default_instance() && transactionid_ != nullptr;
}
inline void PSpanChunk::clear_transactionid() {
  if (GetArenaNoVirtual() == nullptr && transactionid_ != nullptr) {
    delete transactionid_;
  }
  transactionid_ = nullptr;
}
inline const ::v1::PTransactionId& PSpanChunk::transactionid() const {
  const ::v1::PTransactionId* p = transactionid_;
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.transactionId)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PTransactionId*>(
      &::v1::_PTransactionId_default_instance_);
}
inline ::v1::PTransactionId* PSpanChunk::release_transactionid() {
  // @@protoc_insertion_point(field_release:v1.PSpanChunk.transactionId)
  
  ::v1::PTransactionId* temp = transactionid_;
  transactionid_ = nullptr;
  return temp;
}
inline ::v1::PTransactionId* PSpanChunk::mutable_transactionid() {
  
  if (transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PTransactionId>(GetArenaNoVirtual());
    transactionid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanChunk.transactionId)
  return transactionid_;
}
inline void PSpanChunk::set_allocated_transactionid(::v1::PTransactionId* transactionid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transactionid_;
  }
  if (transactionid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transactionid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpanChunk.transactionId)
}

// sfixed64 spanId = 3;
inline void PSpanChunk::clear_spanid() {
  spanid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PSpanChunk::spanid() const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.spanId)
  return spanid_;
}
inline void PSpanChunk::set_spanid(::google::protobuf::int64 value) {
  
  spanid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanChunk.spanId)
}

// string endPoint = 4;
inline void PSpanChunk::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSpanChunk::endpoint() const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.endPoint)
  return endpoint_.GetNoArena();
}
inline void PSpanChunk::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PSpanChunk.endPoint)
}
#if LANG_CXX11
inline void PSpanChunk::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PSpanChunk.endPoint)
}
#endif
inline void PSpanChunk::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PSpanChunk.endPoint)
}
inline void PSpanChunk::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PSpanChunk.endPoint)
}
inline ::std::string* PSpanChunk::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:v1.PSpanChunk.endPoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSpanChunk::release_endpoint() {
  // @@protoc_insertion_point(field_release:v1.PSpanChunk.endPoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSpanChunk::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:v1.PSpanChunk.endPoint)
}

// repeated .v1.PSpanEvent spanEvent = 5;
inline int PSpanChunk::spanevent_size() const {
  return spanevent_.size();
}
inline void PSpanChunk::clear_spanevent() {
  spanevent_.Clear();
}
inline ::v1::PSpanEvent* PSpanChunk::mutable_spanevent(int index) {
  // @@protoc_insertion_point(field_mutable:v1.PSpanChunk.spanEvent)
  return spanevent_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >*
PSpanChunk::mutable_spanevent() {
  // @@protoc_insertion_point(field_mutable_list:v1.PSpanChunk.spanEvent)
  return &spanevent_;
}
inline const ::v1::PSpanEvent& PSpanChunk::spanevent(int index) const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.spanEvent)
  return spanevent_.Get(index);
}
inline ::v1::PSpanEvent* PSpanChunk::add_spanevent() {
  // @@protoc_insertion_point(field_add:v1.PSpanChunk.spanEvent)
  return spanevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::v1::PSpanEvent >&
PSpanChunk::spanevent() const {
  // @@protoc_insertion_point(field_list:v1.PSpanChunk.spanEvent)
  return spanevent_;
}

// int32 applicationServiceType = 6;
inline void PSpanChunk::clear_applicationservicetype() {
  applicationservicetype_ = 0;
}
inline ::google::protobuf::int32 PSpanChunk::applicationservicetype() const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.applicationServiceType)
  return applicationservicetype_;
}
inline void PSpanChunk::set_applicationservicetype(::google::protobuf::int32 value) {
  
  applicationservicetype_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanChunk.applicationServiceType)
}

// int64 keyTime = 7;
inline void PSpanChunk::clear_keytime() {
  keytime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PSpanChunk::keytime() const {
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.keyTime)
  return keytime_;
}
inline void PSpanChunk::set_keytime(::google::protobuf::int64 value) {
  
  keytime_ = value;
  // @@protoc_insertion_point(field_set:v1.PSpanChunk.keyTime)
}

// .v1.PLocalAsyncId localAsyncId = 8;
inline bool PSpanChunk::has_localasyncid() const {
  return this != internal_default_instance() && localasyncid_ != nullptr;
}
inline void PSpanChunk::clear_localasyncid() {
  if (GetArenaNoVirtual() == nullptr && localasyncid_ != nullptr) {
    delete localasyncid_;
  }
  localasyncid_ = nullptr;
}
inline const ::v1::PLocalAsyncId& PSpanChunk::localasyncid() const {
  const ::v1::PLocalAsyncId* p = localasyncid_;
  // @@protoc_insertion_point(field_get:v1.PSpanChunk.localAsyncId)
  return p != nullptr ? *p : *reinterpret_cast<const ::v1::PLocalAsyncId*>(
      &::v1::_PLocalAsyncId_default_instance_);
}
inline ::v1::PLocalAsyncId* PSpanChunk::release_localasyncid() {
  // @@protoc_insertion_point(field_release:v1.PSpanChunk.localAsyncId)
  
  ::v1::PLocalAsyncId* temp = localasyncid_;
  localasyncid_ = nullptr;
  return temp;
}
inline ::v1::PLocalAsyncId* PSpanChunk::mutable_localasyncid() {
  
  if (localasyncid_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::PLocalAsyncId>(GetArenaNoVirtual());
    localasyncid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:v1.PSpanChunk.localAsyncId)
  return localasyncid_;
}
inline void PSpanChunk::set_allocated_localasyncid(::v1::PLocalAsyncId* localasyncid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete localasyncid_;
  }
  if (localasyncid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localasyncid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, localasyncid, submessage_arena);
    }
    
  } else {
    
  }
  localasyncid_ = localasyncid;
  // @@protoc_insertion_point(field_set_allocated:v1.PSpanChunk.localAsyncId)
}

// -------------------------------------------------------------------

// PResult

// bool success = 1;
inline void PResult::clear_success() {
  success_ = false;
}
inline bool PResult::success() const {
  // @@protoc_insertion_point(field_get:v1.PResult.success)
  return success_;
}
inline void PResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:v1.PResult.success)
}

// string message = 2;
inline void PResult::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PResult::message() const {
  // @@protoc_insertion_point(field_get:v1.PResult.message)
  return message_.GetNoArena();
}
inline void PResult::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PResult.message)
}
#if LANG_CXX11
inline void PResult::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PResult.message)
}
#endif
inline void PResult::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PResult.message)
}
inline void PResult::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PResult.message)
}
inline ::std::string* PResult::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:v1.PResult.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PResult::release_message() {
  // @@protoc_insertion_point(field_release:v1.PResult.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PResult::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:v1.PResult.message)
}

// -------------------------------------------------------------------

// PSqlMetaData

// int32 sqlId = 1;
inline void PSqlMetaData::clear_sqlid() {
  sqlid_ = 0;
}
inline ::google::protobuf::int32 PSqlMetaData::sqlid() const {
  // @@protoc_insertion_point(field_get:v1.PSqlMetaData.sqlId)
  return sqlid_;
}
inline void PSqlMetaData::set_sqlid(::google::protobuf::int32 value) {
  
  sqlid_ = value;
  // @@protoc_insertion_point(field_set:v1.PSqlMetaData.sqlId)
}

// string sql = 2;
inline void PSqlMetaData::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSqlMetaData::sql() const {
  // @@protoc_insertion_point(field_get:v1.PSqlMetaData.sql)
  return sql_.GetNoArena();
}
inline void PSqlMetaData::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PSqlMetaData.sql)
}
#if LANG_CXX11
inline void PSqlMetaData::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PSqlMetaData.sql)
}
#endif
inline void PSqlMetaData::set_sql(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PSqlMetaData.sql)
}
inline void PSqlMetaData::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PSqlMetaData.sql)
}
inline ::std::string* PSqlMetaData::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:v1.PSqlMetaData.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSqlMetaData::release_sql() {
  // @@protoc_insertion_point(field_release:v1.PSqlMetaData.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSqlMetaData::set_allocated_sql(::std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:v1.PSqlMetaData.sql)
}

// -------------------------------------------------------------------

// PApiMetaData

// int32 apiId = 1;
inline void PApiMetaData::clear_apiid() {
  apiid_ = 0;
}
inline ::google::protobuf::int32 PApiMetaData::apiid() const {
  // @@protoc_insertion_point(field_get:v1.PApiMetaData.apiId)
  return apiid_;
}
inline void PApiMetaData::set_apiid(::google::protobuf::int32 value) {
  
  apiid_ = value;
  // @@protoc_insertion_point(field_set:v1.PApiMetaData.apiId)
}

// string apiInfo = 2;
inline void PApiMetaData::clear_apiinfo() {
  apiinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PApiMetaData::apiinfo() const {
  // @@protoc_insertion_point(field_get:v1.PApiMetaData.apiInfo)
  return apiinfo_.GetNoArena();
}
inline void PApiMetaData::set_apiinfo(const ::std::string& value) {
  
  apiinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PApiMetaData.apiInfo)
}
#if LANG_CXX11
inline void PApiMetaData::set_apiinfo(::std::string&& value) {
  
  apiinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PApiMetaData.apiInfo)
}
#endif
inline void PApiMetaData::set_apiinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apiinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PApiMetaData.apiInfo)
}
inline void PApiMetaData::set_apiinfo(const char* value, size_t size) {
  
  apiinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PApiMetaData.apiInfo)
}
inline ::std::string* PApiMetaData::mutable_apiinfo() {
  
  // @@protoc_insertion_point(field_mutable:v1.PApiMetaData.apiInfo)
  return apiinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PApiMetaData::release_apiinfo() {
  // @@protoc_insertion_point(field_release:v1.PApiMetaData.apiInfo)
  
  return apiinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PApiMetaData::set_allocated_apiinfo(::std::string* apiinfo) {
  if (apiinfo != nullptr) {
    
  } else {
    
  }
  apiinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apiinfo);
  // @@protoc_insertion_point(field_set_allocated:v1.PApiMetaData.apiInfo)
}

// int32 line = 3;
inline void PApiMetaData::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 PApiMetaData::line() const {
  // @@protoc_insertion_point(field_get:v1.PApiMetaData.line)
  return line_;
}
inline void PApiMetaData::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:v1.PApiMetaData.line)
}

// int32 type = 4;
inline void PApiMetaData::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 PApiMetaData::type() const {
  // @@protoc_insertion_point(field_get:v1.PApiMetaData.type)
  return type_;
}
inline void PApiMetaData::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:v1.PApiMetaData.type)
}

// -------------------------------------------------------------------

// PStringMetaData

// int32 stringId = 1;
inline void PStringMetaData::clear_stringid() {
  stringid_ = 0;
}
inline ::google::protobuf::int32 PStringMetaData::stringid() const {
  // @@protoc_insertion_point(field_get:v1.PStringMetaData.stringId)
  return stringid_;
}
inline void PStringMetaData::set_stringid(::google::protobuf::int32 value) {
  
  stringid_ = value;
  // @@protoc_insertion_point(field_set:v1.PStringMetaData.stringId)
}

// string stringValue = 2;
inline void PStringMetaData::clear_stringvalue() {
  stringvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PStringMetaData::stringvalue() const {
  // @@protoc_insertion_point(field_get:v1.PStringMetaData.stringValue)
  return stringvalue_.GetNoArena();
}
inline void PStringMetaData::set_stringvalue(const ::std::string& value) {
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v1.PStringMetaData.stringValue)
}
#if LANG_CXX11
inline void PStringMetaData::set_stringvalue(::std::string&& value) {
  
  stringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1.PStringMetaData.stringValue)
}
#endif
inline void PStringMetaData::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1.PStringMetaData.stringValue)
}
inline void PStringMetaData::set_stringvalue(const char* value, size_t size) {
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1.PStringMetaData.stringValue)
}
inline ::std::string* PStringMetaData::mutable_stringvalue() {
  
  // @@protoc_insertion_point(field_mutable:v1.PStringMetaData.stringValue)
  return stringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PStringMetaData::release_stringvalue() {
  // @@protoc_insertion_point(field_release:v1.PStringMetaData.stringValue)
  
  return stringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PStringMetaData::set_allocated_stringvalue(::std::string* stringvalue) {
  if (stringvalue != nullptr) {
    
  } else {
    
  }
  stringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringvalue);
  // @@protoc_insertion_point(field_set_allocated:v1.PStringMetaData.stringValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Span_2eproto
